#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
#  RMD_control.py
#  
#  Copyright 2022  <pi@raspberrypi>
#  
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; either version 2 of the License, or
#  (at your option) any later version.
#  
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#  
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, write to the Free Software
#  Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
#  MA 02110-1301, USA.
#  
#  

import can, time, os, sys, curses 
MOTOR_ID = 0x142

screen = curses.initscr()
curses.cbreak()
screen.keypad(1)

RMD_X8_POSITION_CTRL_4_CMD = 0xA6


class position_control_1_cmd:

    def __init__(self,can_id, speed_limit,spin_direction=0,
                 speed_limited_low=0,speed_limited_high=0,
                 pos_ctrl_low=0, pos_ctrl_high = 0, data6 = 0, data7 = 0):

        self.can_id = can_id
        self.speed_limit = speed_limit
        self.cmd_byte = RMD_X8_POSITION_CTRL_4_CMD
        self.spin_direction=spin_direction
        self.speed_limited_low=speed_limited_low
        self.speed_limited_high=speed_limited_high
        self.pos_ctrl_low = pos_ctrl_low
        self.pos_ctrl_high = pos_ctrl_high
        self.data6 = data6
        self.data7 = data7

    def update_pos(self, new_pos, dir):
        # convert rpm to dps
        speed_limited = self.speed_limited * 360;
        speed_limited = self.speed_limited / 60;

        # Convert 1degree/LSB to 0.01degree/LSB
        new_pos = new_pos * 100;
        new_pos = new_pos * 6;

        self.spin_direction = dir

        self.speed_limited_low = speed_limited & 0xFF
        self.speed_limited_high = speed_limited>>8 & 0xFF

        self.pos_ctrl_low = new_pos & 0xFF
        self.pos_ctrl_high = new_pos>>8 & 0xFF

    def parse_msg(self):
        data0 = self.cmd_byte
        data1 = self.spin_direction
        data2 = self.speed_limited_low
        data3 = self.speed_limited_high
        data4 = self.pos_ctrl_low
        data5 = self.pos_ctrl_high
        data6 = self.data6
        data7 = self.data7
        return [data0,data1,data2,data3,data4,data5,data6,data7]

    
STEP_VALUE = 50
RMD_SPEED_LIMITED = 514
CLOCKWISE = 0x00
COUNTER_CLOCKWISE = 0x01


def main(args):
    bus = can.interface.Bus(channel='can0', bustype='socketcan_native')
    msg = can.Message(arbitration_id=MOTOR_ID, data=[0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00], is_extended_id=False)
    bus.send(msg)
    mot = position_control_1_cmd(id=142,speed_limit=RMD_SPEED_LIMITED,spin_direction=CLOCKWISE)
    zero = 0
    pos = int(0)
    arrow_key =''

    while arrow_key != ord('q'):
        arrow_key = screen.getch()
        if arrow_key == ord('w'):

            msg = can.Message(arbitration_id=MOTOR_ID, data=[0x88,0x00,0x00,0x00,0x00,0x00,0x00,0x00], is_extended_id=False)
            bus.send(msg)
        if arrow_key == ord('s'):
            msg = can.Message(arbitration_id=MOTOR_ID, data=[0x80,0x00,0x00,0x00,0x00,0x00,0x00,0x00], is_extended_id=False)
            bus.send(msg)
        if arrow_key == ord('d'):
            pos +=STEP_VALUE
            mot.update_pos()
            data = mot.parse_msg()
            msg = can.Message(arbitration_id=MOTOR_ID, data=data, is_extended_id=False)
            bus.send(msg)
        if arrow_key == ord('a'):
            pos -=STEP_VALUE
            mot.update_pos()
            data = mot.parse_msg()
            msg = can.Message(arbitration_id=MOTOR_ID, data=data, is_extended_id=False)
            bus.send(msg)
            
        screen.refresh()
        time.sleep(0.1)

    return 0

if __name__ == '__main__':
    os.system('sudo /sbin/ip link set can0 down')
    os.system('sudo /sbin/ip link set can0 up type can bitrate 1000000')

    sys.exit(main(sys.argv))
